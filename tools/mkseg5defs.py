import os
import sys

# This script converts MK64 course_texture struct tables to segment 5 address defines.
# Segment 5 addresses are generated by the game using a texture course table.
# This uses data size (uncompressed size) value on the same table to generate the address.

def generate_texture_define_address(input_file):
    macros = []
    base_seg_address = 0x05000000  # Base segment
    current_seg_address = base_seg_address  # Current segment to be increased for each texture listed
    course_name = ""

    with open(input_file, 'r') as file:
        lines = file.readlines()

    for line in lines:
        # Assume the table is under a course_texture struct
        if "course_texture" in line:
            # Take variable name from the struct and strip out brackets
            course_name = line.split()[2].strip().replace("[", "").replace("]", "")

        # Split into parts
        parts = line.strip().split(',')

        if len(parts) == 5:
            # Take the size defined for the texture
            size = int(parts[2].strip(), 16)
            # Set texture address without the segment number
            address = current_seg_address - base_seg_address

            # Generate define with the name and address
            macro_definition = f"#define d_{course_name}_{address:01X} 0x{current_seg_address:08X}"

            # Add to the macro list
            macros.append(macro_definition)

            # Update address for the next texture address
            current_seg_address += size

            # If the texture size is 0, assume it's the end of the table to stop generating defines
            if size == 0:
                macros.pop()
                break

    return macros

# Input filename with the texture table
input_file = sys.argv[1]

# Generate defines from the input file
texture_defines = generate_texture_define_address(input_file)

# Output filename with generated defines
output_file = sys.argv[2]

# Open output file and write defines
with open(output_file, 'w') as out_file:
    for macro in texture_defines:
        out_file.write(f"{macro}\n")
